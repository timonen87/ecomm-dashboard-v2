generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    email    String  @unique
    password String?

    name   String @default("Имя не указано")
    avatar String @default("/uploads/no-avatar-image.png")

    stores Store[]

    favorites Product[]
    orders Order[]

    @@map("user")
}

model Store {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title       String
    description String?

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    categories Category[]
    products   Product[]
    orderItems OrderItem[]

    @@map("store")
}

model Product {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title       String
    description String
    price       Int
    images      String[]

    orderItems OrderItem[]

    store   Store?  @relation(fields: [storeId], references: [id])
    storeId String? @map("store_id")

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?   @map("category_id")

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    @@map("product")
}

model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    title       String
    description String

    products Product[]

    store   Store?  @relation(fields: [storeId], references: [id])
    storeId String? @map("store_id")

    @@map("category")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("order_item")
}


enum EnumOrderStatus {
  PENDING
  PAYED
}
